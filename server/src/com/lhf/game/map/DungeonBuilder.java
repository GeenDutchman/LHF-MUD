package com.lhf.game.map;

import com.lhf.game.map.objects.item.Note;
import com.lhf.game.map.objects.roomobject.Dispenser;
import com.lhf.game.map.objects.roomobject.Switch;
import com.lhf.game.map.objects.roomobject.interfaces.InteractAction;

public class DungeonBuilder {

    public static Dungeon buildStaticDungeon() {
        Dungeon dungeon = new Dungeon();

        //Entry Room
        Room entryRoom = new Room("This is the entry room.");
        Note addNote = new Note("interact note", true, "This note is to test the switch action.");

        //Switch test start
        Switch testSwitch = new Switch("test switch", true, false);
        //Set items the action is going to use
        testSwitch.setItem("note", addNote);
        testSwitch.setItem("room", entryRoom);
        //Create action as anonymous function
        InteractAction testAction = (player, args) -> {
            //You can do anything you imagine inside, just with casting overhead
            //This can be used for the secret room trigger, since a switch can be hidden
            Object o1 = args.get("note");
            if (!(o1 instanceof Note)) {
                return "Switch error.";
            }
            Note n = (Note)o1;
            Object o2 = args.get("room");
            if (!(o2 instanceof Room)) {
                return "Switch error.";
            }
            Room r = (Room)o2;
            r.addItem(n);
            return "Switch activated. A note dropped from the ceiling.";
        };
        //Set Action
        testSwitch.setAction(testAction);
        //Switch test end
        entryRoom.addObject(testSwitch);




        //History Hall
        Room historyHall = new Room("This is the history hall.");
        Note loreNote = new Note("ominous lore", true, "You read the page and it says 'This page intentionally left blank.'");
        historyHall.addItem(loreNote);

        //Test dispenser start - could be used for other items
        Dispenser dispenser = new Dispenser("note dispenser", true, true);
        dispenser.setItem("room", historyHall);
        dispenser.setItem("disp", dispenser);
        InteractAction testAction2 = (player, args) -> {
            Object o1 = args.get("room");
            if (!(o1 instanceof Room)) {
                return "Switch error 1.";
            }
            Room r = (Room)o1;
            Object o2 = args.get("disp");
            if (!(o2 instanceof Dispenser)) {
                return "Switch error 2.";
            }
            Dispenser d = (Dispenser)o2;
            Note generatedNote = new Note("note" + d.getCount(), true, "This is a autogenerated note number " + d.getCount() + ".");
            r.addItem(generatedNote);
            d.incrementCount();
            return "A note was spit out of the dispenser.";
        };
        dispenser.setAction(testAction2);
        //Test dispenser end
        historyHall.addObject(dispenser);

        //Path
        entryRoom.addExit("forward", historyHall);
        historyHall.addExit("backward", entryRoom);

        //Set starting room
        dungeon.setStartingRoom(entryRoom);

        //Add to Dungeon
        dungeon.addRoom(entryRoom);
        dungeon.addRoom(historyHall);

        return dungeon;
    }

    public static Dungeon buildDynamicDungeon(int seed) {

        return null;
    }
}
