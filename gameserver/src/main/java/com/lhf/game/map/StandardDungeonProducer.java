package com.lhf.game.map;

import java.io.FileNotFoundException;
import java.util.EnumMap;
import java.util.Map;

import com.lhf.game.EffectPersistence;
import com.lhf.game.EffectResistance;
import com.lhf.game.TickType;
import com.lhf.game.battle.BattleManager;
import com.lhf.game.creature.CreatureEffectSource;
import com.lhf.game.creature.Monster;
import com.lhf.game.creature.NameGenerator;
import com.lhf.game.creature.statblock.Statblock;
import com.lhf.game.creature.statblock.StatblockManager;
import com.lhf.game.dice.DamageDice;
import com.lhf.game.dice.DiceDC;
import com.lhf.game.dice.DieType;
import com.lhf.game.enums.Attributes;
import com.lhf.game.enums.DamageFlavor;
import com.lhf.game.enums.HealType;
import com.lhf.game.item.Trap;
import com.lhf.game.item.concrete.Chest;
import com.lhf.game.item.concrete.Dispenser;
import com.lhf.game.item.concrete.HealPotion;
import com.lhf.game.item.concrete.Lever;
import com.lhf.game.item.concrete.NotableFixture;
import com.lhf.game.item.concrete.equipment.CarnivorousArmor;
import com.lhf.game.item.concrete.equipment.ChainMail;
import com.lhf.game.item.concrete.equipment.MantleOfDeath;
import com.lhf.game.item.concrete.equipment.ReaperScythe;
import com.lhf.game.item.concrete.equipment.RustyDagger;
import com.lhf.game.item.concrete.equipment.Shortsword;
import com.lhf.game.item.concrete.equipment.Whimsystick;
import com.lhf.game.map.Dungeon.DungeonBuilder;

public final class StandardDungeonProducer {
        public static DungeonBuilder buildStaticDungeonBuilder(StatblockManager statblockLoader)
                        throws FileNotFoundException {
                DungeonBuilder builder = DungeonBuilder.newInstance();

                Statblock goblin = statblockLoader.statblockFromfile("goblin");
                Statblock bugbear = statblockLoader.statblockFromfile("bugbear");
                Statblock hobgoblin = statblockLoader.statblockFromfile("hobgoblin");

                BattleManager.Builder battleBuilder = BattleManager.Builder.getInstance();
                RestArea.Builder restBuilder = RestArea.Builder.getInstance();

                // Entry Room RM1
                Room.RoomBuilder entryRoomBuilder = Room.RoomBuilder.getInstance().addSubAreaBuilder(restBuilder);
                entryRoomBuilder.setName("Entry Room").setDescription("This is the entry room.");

                // History Hall RM2
                Room.RoomBuilder historyHallBuilder = Room.RoomBuilder.getInstance().addSubAreaBuilder(battleBuilder);
                historyHallBuilder.setName("History Hall").setDescription("This is the history hall.");
                NotableFixture loreNote = new NotableFixture("ominous lore",
                                "You read the page and it says 'This page intentionally left blank.'");
                historyHallBuilder.addItem(loreNote);

                RustyDagger dagger = new RustyDagger();

                historyHallBuilder.addItem(dagger);
                // Test dispenser start - could be used for other items
                Dispenser dispenser = new Dispenser("note dispenser",
                                "It looks like a mailbox with a big lever.  Something probably comes out of that slot.");
                NotableFixture generatedNote = new NotableFixture("note", "This is a autogenerated note.");
                dispenser.addItem(generatedNote);
                // Test dispenser end
                historyHallBuilder.addItem(dispenser);

                // RM3
                Room.RoomBuilder offeringRoomBuilder = Room.RoomBuilder.getInstance().addSubAreaBuilder(battleBuilder)
                                .setName("Offering Room")
                                .setDescription("This is the offering room.");
                KeyedDoorway vaultDoors = new KeyedDoorway(false);
                Lever vaultLever = new Lever("switch", "A lever on the wall.");
                vaultLever.setLockable(vaultDoors);
                offeringRoomBuilder.addItem(vaultLever);
                // Room offeringRoom = offeringRoomBuilder.build();

                // RM4
                Room.RoomBuilder trappedHallBuilder = Room.RoomBuilder.getInstance().addSubAreaBuilder(battleBuilder)
                                .setName("Trapped Room")
                                .setDescription("This is the trapped room.");
                HealPotion h1 = new HealPotion();
                trappedHallBuilder.addItem(h1);
                trappedHallBuilder.addItem(new Trap("Spiked Pit",
                                "A thin layer of carpet over a spiked pit.", true,
                                new EnumMap<>(Map.of(Attributes.DEX, new DiceDC(12))))
                                .addEffect(new CreatureEffectSource("Spike", new EffectPersistence(TickType.INSTANT),
                                                new EffectResistance(Attributes.DEX, 10, null),
                                                "A spike that pierces you.", false)
                                                .addDamage(new DamageDice(1, DieType.FOUR, DamageFlavor.PIERCING))));

                Room.RoomBuilder secretRoomBuilder = Room.RoomBuilder.getInstance().addSubAreaBuilder(battleBuilder)
                                .setName("Secret Room")
                                .setDescription("This is the secret room!");

                MantleOfDeath mantle = new MantleOfDeath();
                ReaperScythe scythe = new ReaperScythe();

                HealPotion healPotion = new HealPotion();
                secretRoomBuilder.addItem(healPotion);
                secretRoomBuilder.addItem(mantle);
                secretRoomBuilder.addItem(scythe);
                // Room secretRoom = secretRoomBuilder.build();

                // RM5
                Room.RoomBuilder statueRoomBuilder = Room.RoomBuilder.getInstance().addSubAreaBuilder(battleBuilder)
                                .setName("Statue Room")
                                .setDescription("This is the statue room.");
                NotableFixture bossNote = new NotableFixture("note from boss",
                                "The tutorial boss is on vacation right now.");
                statueRoomBuilder.addItem(bossNote);

                /**
                 * TODO: redo statue as some kind of interactable door
                 * between the statueRoom and the secretRoom
                 */
                NotableFixture statue = new NotableFixture("golden statue",
                                "The statue has a start to a riddle, but it looks like it hasn't been finished yet.");
                statueRoomBuilder.addItem(statue);

                // RM6 The armory
                Room.RoomBuilder armoryBuilder = Room.RoomBuilder.getInstance().addSubAreaBuilder(battleBuilder)
                                .setName("Armory")
                                .setDescription("An armory");
                CarnivorousArmor mimic = new CarnivorousArmor();
                ChainMail mail = new ChainMail();
                Whimsystick stick = new Whimsystick();
                Shortsword shortsword = new Shortsword();
                HealPotion potion = new HealPotion();
                armoryBuilder.addItem(mimic);
                armoryBuilder.addItem(mail);
                armoryBuilder.addItem(stick);
                armoryBuilder.addItem(shortsword);
                armoryBuilder.addItem(potion);
                // Room armory = armoryBuilder.build();

                // RM7
                Room.RoomBuilder passage = Room.RoomBuilder.getInstance().addSubAreaBuilder(battleBuilder)
                                .setName("Passageway")
                                .setDescription("An old, curvy and dusty passageway");
                // RM8
                Room.RoomBuilder treasuryBuilder = Room.RoomBuilder.getInstance().addSubAreaBuilder(battleBuilder)
                                .setName("Vault")
                                .setDescription("A looted vault room.");
                HealPotion regular = new HealPotion();
                HealPotion greater = new HealPotion(HealType.Greater);
                HealPotion critical = new HealPotion(HealType.Critical);

                treasuryBuilder.addItem(regular);
                treasuryBuilder.addItem(greater);
                treasuryBuilder.addItem(critical);
                for (Chest.ChestDescriptor descriptor : Chest.ChestDescriptor.values()) { // it's "looted", so...
                        treasuryBuilder.addItem(new Chest(descriptor));
                }
                treasuryBuilder.addItem(vaultLever);

                // Monsters
                Monster.MonsterBuilder g1 = Monster.getMonsterBuilder().setName(NameGenerator.Generate("goblin"))
                                .setStatblock(goblin).useDefaultConversation();
                historyHallBuilder.addNPCBuilder(g1);

                Monster.MonsterBuilder boss = Monster.getMonsterBuilder().setName("Boss Bear").setStatblock(bugbear);
                statueRoomBuilder.addNPCBuilder(boss);

                Monster.MonsterBuilder rightHandMan = Monster.getMonsterBuilder()
                                .setName(NameGenerator.Generate("Right")).setStatblock(hobgoblin);
                offeringRoomBuilder.addNPCBuilder(rightHandMan);

                // Set starting room
                builder.addStartingRoom(entryRoomBuilder);

                // Path
                builder.connectRoom(historyHallBuilder, Directions.WEST, entryRoomBuilder);
                builder.connectRoom(offeringRoomBuilder, Directions.WEST, historyHallBuilder);
                builder.connectRoom(armoryBuilder, Directions.SOUTH, historyHallBuilder);
                builder.connectRoom(trappedHallBuilder, Directions.WEST, offeringRoomBuilder);
                builder.connectRoom(passage, Directions.SOUTH, armoryBuilder);
                builder.connectRoom(treasuryBuilder, Directions.WEST, passage, vaultDoors);
                builder.connectRoom(trappedHallBuilder, Directions.NORTH, treasuryBuilder, vaultDoors);
                builder.connectRoom(statueRoomBuilder, Directions.NORTH, trappedHallBuilder);
                builder.connectRoomOneWay(secretRoomBuilder, Directions.WEST, statueRoomBuilder);

                return builder;
        }
}
